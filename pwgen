#! /usr/bin/python3
"""Word-based password generator.

The passwords are based on the XKCD password scheme with
words sourced from the Hunspell dictionary.  See:
https://xkcd.com/936/

Usage:
  pwgen [--words=<w> | --entropy=<e>] [--noexpand] [-v | --verbose] [--minlen=<min>] [--maxlen=<max>]
  pwgen -h | --help

Options:
  -h --help       Show this screen.
  --words=<w>     The number of words in the password [default: 4].
  --entropy=<e>   The minimum entropy in the password.
  --noexpand      Disable insertion of special characters.
  --minlen=<min>  Minimum word length (inclusive) [default: 4]
  --maxlen=<max>  Maximum word length (inclusive) [default: 8]
  -v --verbose    Print extra information about the password.
"""
from docopt import docopt
from random import SystemRandom
random = SystemRandom()
from math import log, ceil
import sys, operator

WORD_DICT = "/usr/share/hunspell/en_US.dic"
SUBST = {
    'a': ['@'],
    'e': ['3'],
    'i': ['!'],
    's': ['$'],
    't': ['7'],
}

def count_expanded(word):
    """Count number of expanded words."""
    count = 1
    for c in word:
        if c in SUBST:
            count *= len(SUBST[c]) + 1
    return count

def expand_word(word):
    """Randomly choose an expansion of given word."""
    chars = []
    for c in word:
        if c in SUBST:
            chars.append(random.choice(SUBST[c] + [c]))
        else:
            chars.append(c)
    return ''.join(chars)

if __name__ == '__main__':
    args = docopt(__doc__, version="pwgen 0.1.0")
    min_len, max_len = int(args['--minlen']), int(args['--maxlen'])
    words = []
    num_words = 0
    with open(WORD_DICT) as dict_file:
        # Load dictionary words from file. Respect length bounds
        word_set = (w.strip().split('/')[0].lower() for w in dict_file)
        words = [w for w in word_set if min_len <= len(w) <= max_len]
        # Count the effective number of loaded words
        if len(words) <= 0:
            print("No words loaded", file=sys.stderr)
            exit(1)
        if args['--noexpand']:
            num_words = len(words)
        else:
            num_words = sum(count_expanded(w) for w in words)
    word_entropy = log(num_words, 2)
    num_gen_words = int(args['--words'])
    if args['--entropy']:
        num_gen_words = ceil(float(args['--entropy']) / word_entropy)
    sel_words = [random.choice(words) for i in range(num_gen_words)]
    plain = ''.join(w.capitalize() for w in sel_words)
    expanded = plain
    if not args['--noexpand']:
        expanded = ''.join(expand_word(w).capitalize()
                           for w in sel_words)
    if not args['--verbose']:
        print(expanded)
    else:
        print("Entropy:  {:.4f} bits".format(word_entropy * num_gen_words))
        print("Plain:    {}".format(plain))
        if not args['--noexpand']:
            print("Expanded: {}".format(expanded))
